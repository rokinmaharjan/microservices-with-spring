version: '2.1'
services:
  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - 2181:2181
    networks:
      backend:
        aliases:
          - "zookeeper"
  kafkaserver:
    image: wurstmeister/kafka:latest
    ports:
      - 9092:9092
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_ADVERTISED_PORT=9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CREATE_TOPICS=dresses:1:1,ratings:1:1
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    depends_on:
      - zookeeper
    networks:
      backend:
        aliases:
          - "kafka"
  redisserver:
    image: redis:alpine
    ports:
      - 6379:6379
    networks:
      backend:
        aliases:
          - "redis"
  elasticsearch:
    image: arm64v8/elasticsearch:7.17.3
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
#    ulimits:
#      memlock:
#        soft: -1
#        hard: -1
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    ports:
      - 9300:9300
      - 9200:9200
    networks:
      backend:
        aliases:
          - "elasticsearch"
  kibana:
    image: arm64v8/kibana:7.17.3
    container_name: kibana
    environment:
      ELASTICSEARCH_URL: "http://elasticsearch:9300"
    ports:
      - 5601:5601
    networks:
      backend:
        aliases:
          - "kibana"
  logstash:
    image: arm64v8/logstash:7.17.3
    container_name: logstash
    command: logstash -f /etc/logstash/conf.d/logstash.conf
    volumes:
      - ./config:/etc/logstash/conf.d
    ports:
      - "5001:5000"
    networks:
      backend:
        aliases:
          - "logstash"
  zipkin:
    image: openzipkin/zipkin:latest-arm64
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      backend:
        aliases:
          - "zipkin"
  configserver:
#    image: config-server
    build: ../config-server
    ports:
      - "8071:8071"
    healthcheck:
      test: "curl --fail --silent localhost:8071/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 2
    networks:
      backend:
        aliases:
          - "configserver"
  eurekaserver:
#    image: eureka-server
    build: ../service-discovery-eureka
    ports:
      - "8070:8070"
    environment:
      spring_cloud_config_uri: "http://configserver:8071"
    healthcheck:
      test: "curl --fail --silent localhost:8070/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 2
    depends_on:
      configserver:
        condition: service_healthy
    networks:
      backend:
        aliases:
          - "eurekaserver"
  apigateway:
#    image: api-gateway
    build: ../api-gateway
    ports:
      - "8072:8072"
    environment:
      spring_cloud_config_uri: "http://configserver:8071"
    depends_on:
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    networks:
      backend:
        aliases:
          - "api-gateway"
#  microservice1:
##    image: microservice1
#    build: ../microservice1
#    environment:
#      spring_cloud_config_uri: "http://configserver:8071"
#      # eureka.client.serviceUrl.defaultZone: "http://eurekaserver:8070/eureka/"
#      server_port: "8080"
#    depends_on:
#      configserver:
#        condition: service_healthy
#      eurekaserver:
#        condition: service_healthy
#      kafkaserver:
#        condition: service_started
#    ports:
#      - "8080:8080"
#    networks:
#      - backend
  microservice2:
#    image: microservice2
    build: ../microservice2
    environment:
      spring_cloud_config_uri: "http://configserver:8071"
      # eureka_client_serviceUrl_defaultZone: "http://eurekaserver:8070/eureka/"
      server_port: "8081"
    depends_on:
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
      kafkaserver:
        condition: service_started
    ports:
      - "8081:8081"
    networks:
      - backend
#  microservice2_2:
#    image: microservice2
#    environment:
#      spring_cloud_config_uri: "http://configserver:8071"
#      # eureka_client_serviceUrl_defaultZone: "http://eurekaserver:8070/eureka/"
#      server_port: "8083"
#    depends_on:
#      configserver:
#        condition: service_healthy
#      eurekaserver:
#        condition: service_healthy
#    ports:
#      - "8083:8083"
#    networks:
#      - backend
  microservice3:
#    image: microservice3
    build: ../microservice3
    environment:
      spring_cloud_config_uri: "http://configserver:8071"
      # eureka_client_serviceUrl_defaultZone: "http://eurekaserver:8070/eureka/"
      server_port: "8082"
    depends_on:
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
      kafkaserver:
        condition: service_started
    ports:
      - "8082:8082"
    networks:
      - backend
#  microservice3_2:
#    image: microservice3
#    environment:
#      spring_cloud_config_uri: "http://configserver:8071"
#      # eureka_client_serviceUrl_defaultZone: "http://eurekaserver:8070/eureka/"
#      server_port: "8084"
#    depends_on:
#      configserver:
#        condition: service_healthy
#      eurekaserver:
#        condition: service_healthy
#    ports:
#      - "8084:8084"
#    networks:
#      - backend

#  dependencies:
#    image: ghcr.io/openzipkin/zipkin-dependencies
#    container_name: dependencies
#    entrypoint: crond -f
#    environment:
#      - STORAGE_TYPE=zipkinStorage
#      - ES_HOSTS=zipkinStorage
#    depends_on:
#      - zipkinStorage

#  zipstore:
#    image: openzipkin/zipkin-elasticsearch7
#    container_name: zipstore
##    ports:
##      - 9201:9200
#  zipkin:
#    image: openzipkin/zipkin:latest-arm64
#    container_name: zipkin
##    environment:
##      - STORAGE_TYPE=zipstore
##      - "ES_HOSTS=elasticsearch:9300"
#    ports:
#      - 9411:9411
#    depends_on:
#      - zipstore
#  dependencies:
#    image: openzipkin/zipkin-dependencies
#    container_name: dependencies
#    entrypoint: crond -f
#    depends_on:
#    - zipstore
#    environment:
#    - STORAGE_TYPE=zipstore
#    - "ES_HOSTS=zipstore:9300"
#    - "ES_NODES_WAN_ONLY=true"
#  zipkinStorage:
#    image: ghcr.io/openzipkin/zipkin-elasticsearch7:${TAG:-latest}
#    container_name: zipkinStorage
#    # Uncomment to expose the storage port for testing
#    ports:
#      - 9201:9200
volumes:
  esdata1:
    driver: local

networks:
  backend:
    driver: bridge